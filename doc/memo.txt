*memo.txt*  Neovim memo management plugin

                       MEMO.NVIM REFERENCE MANUAL

==============================================================================
Contents                                                       *memo-contents*

1. Introduction ..................... |memo-introduction|
2. Installation ..................... |memo-installation|
3. Configuration .................... |memo-configuration|
4. Commands ......................... |memo-commands|
5. Keymaps .......................... |memo-mappings|
6. Templates ........................ |memo-templates|
7. Other ............................ |memo-misc|

==============================================================================
1. Introduction                                              *memo-introduction*

memo.nvim is a Neovim plugin for efficiently managing memos.
It provides the following features:

- Create different types of memos (general, work, prompt, code)
- Generate periodic memos (daily, weekly, monthly, yearly)
- Todo list management
- fzf-lua integration for searching and grepping memos
- Git integration (commit, push, pull)
- Customizable templates with placeholders
- Configurable date formats

==============================================================================
2. Installation                                              *memo-installation*

Dependencies:
- Neovim 0.7.0+ (required for `vim.keymap.set`)
- fzf-lua (https://github.com/ibhagwan/fzf-lua)
- Git (optional, for version control features)
- fugitive.vim (optional, for enhanced Git status)

Using packer.nvim:
>
  use {
    'gen4438/memo.nvim',
    requires = { 'ibhagwan/fzf-lua' },
    config = function()
      require('memo').setup({
        -- Custom options (optional)
        memo_dir = vim.fn.expand("~/my-notes"),
        -- Template options
        template_dir = vim.fn.expand("~/my-notes/templates"),
        date_format = "%Y/%m/%d",
      })
    end
  }
<

Using lazy.nvim:
>
  {
    'gen4438/memo.nvim',
    dependencies = { 'ibhagwan/fzf-lua' },
    opts = {
      -- Custom options (optional)
      memo_dir = vim.fn.expand("~/my-notes"),
      -- Template options
      template_dir = vim.fn.expand("~/my-notes/templates"),
      date_format = "%Y/%m/%d",
    },
  }
<

==============================================================================
3. Configuration                                            *memo-configuration*

Default configuration:
>
  require('memo').setup({
    -- Main directory for memos
    memo_dir = vim.fn.expand("~/my-notes"),
    
    -- Template settings
    template_dir = vim.fn.expand("~/my-notes/templates"),
    create_default_templates = true,
    
    -- Date format settings (using Lua's os.date format)
    date_format = "%Y/%m/%d",
    week_format = "%Y/%m/%d - %Y/%m/%d",
    month_format = "%Y/%m",
    year_format = "%Y",
  })
<

Options:
  `memo_dir`               Directory to store memos
  `template_dir`           Directory to store templates
  `create_default_templates` Whether to create default templates on startup
  `date_format`            Format for dates (using Lua's os.date format)
  `week_format`            Format for week display
  `month_format`           Format for month display
  `year_format`            Format for year display

==============================================================================
4. Commands                                                      *memo-commands*

Memo Creation Commands:
  `:MemoNew <title>`                  Create a general memo
  `:MemoNewWork [project] [title]`    Create a work memo (interactive if no args)
  `:MemoNewPrompt <title>`            Create a prompt memo
  `:MemoNewCode [lang] [title]`       Create a code memo (interactive if no args)

Todo and Periodic Memo Commands:
  `:MemoOpenTodo`                     Open todo list
  `:MemoOpenDaily`                    Open daily memo
  `:MemoOpenWeekly`                   Open weekly memo
  `:MemoOpenMonthly`                  Open monthly memo
  `:MemoOpenYearly`                   Open yearly memo

Note: Periodic memos are created as buffers only and are saved to disk only 
when you explicitly save them. Canceling the buffer with `:q` will discard 
changes without creating a file.

Search Commands:
  `:FzfMemoList`                     List all memos
  `:FzfMemoGrep`                     Full-text search of memos
  `:FzfMemoTags`                     Search for #tags in memos

Git Integration Commands:
  `:MemoGitStage`                    Add changed files
  `:MemoGitStageAll`                 Add all files
  `:MemoGitCommit [message]`         Stage changed files and commit
  `:MemoGitCommitAll [message]`      Stage and commit all changes
  `:MemoGitSyncPush`                 Push to remote
  `:MemoGitSyncPull`                 Pull from remote
  `:MemoGitShowStatus`               Show Git status (uses fugitive if available)

Template Management Commands:
  `:MemoTemplateEdit [type]`          Create or edit a template (interactive if no type)

==============================================================================
5. Keymaps                                                       *memo-mappings*

Memo Creation:
  `<leader>mnn`                      Create general memo
  `<leader>mnw`                      Create work memo (interactive)
  `<leader>mnp`                      Create prompt memo
  `<leader>mnc`                      Create code memo (interactive)

Todo and Periodic Memos:
  `<leader>mt`                       Open todo list
  `<leader>md`                       Open daily memo
  `<leader>mw`                       Open weekly memo
  `<leader>mm`                       Open monthly memo
  `<leader>my`                       Open yearly memo

Search:
  `<leader>ml`                       List memos with fzf
  `<leader>mgg`                      Grep memos with fzf
  `<leader>mgt`                      Search memo tags with fzf

Git Integration:
  `<leader>mga`                      Stage changed memo files
  `<leader>mgA`                      Stage all memo files
  `<leader>mgc`                      Stage and commit memo changes
  `<leader>mgC`                      Stage and commit all memo changes
  `<leader>mgsh`                     Push memo changes to remote
  `<leader>mgll`                     Pull memo changes from remote
  `<leader>mgst`                     Show git status for memo repository

==============================================================================
6. Templates                                                    *memo-templates*

The plugin includes a template system for customizing the content of all memo
types. Templates are stored in the `template_dir` directory.

Template Placeholders:
  `{{title}}`        - Title of the memo
  `{{date}}`         - Current date in date_format
  `{{week_start}}`   - Start of week in date_format
  `{{week_end}}`     - End of week in date_format
  `{{month}}`        - Current month in month_format
  `{{year}}`         - Current year in year_format
  `{{project}}`      - Project name (for work memos)
  `{{language}}`     - Language name (for code memos)

Available Template Types:
  `general`          - General memos
  `work`             - Work memos
  `prompt`           - Prompt memos
  `code`             - Code memos
  `daily`            - Daily memos
  `weekly`           - Weekly memos
  `monthly`          - Monthly memos
  `yearly`           - Yearly memos
  `todo`             - Todo list

To create or edit a template, use:
  `:MemoTemplateEdit [type]`

If a template doesn't exist, the plugin will:
1. Copy from plugin's default templates if available
2. Create one with built-in defaults if no plugin template exists
3. Open the template file for editing

==============================================================================
7. Other                                                            *memo-misc*

Directory Structure:
>
  my-notes/
  ├── templates/               # Template directory
  │   ├── general.md           # Template for general memos
  │   ├── work.md              # Template for work memos
  │   └── ...                  # Other templates
  ├── todo/
  │   └── todo.md              # Todo list
  ├── prompt/
  ├── note/
  │   ├── work/
  │   │   ├── project1/
  │   │   └── project2/
  │   └── general/
  └── code/
      ├── python/
      ├── javascript/
      └── other_language/
<

Interactive Selection:
- When creating work memos or code memos interactively, you can select existing
  projects/languages or create new ones with the "+ Create new" option

Completion Features:
- Work memo project names are auto-completed based on existing directories
- Code memo languages are auto-completed based on existing directories

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
